{"version":3,"sources":["components/appstore/AppItem.js","components/appstore/AppItems.js","components/appstore/AppStore.js","javascripts/firebase.js","components/devices/OSStatistics.js","components/devices/DeviceList.js","App.js","serviceWorker.js","index.js"],"names":["AppItem","props","appItem","react_default","a","createElement","className","os","env","href","url","rel","name","version","AppItems","listItems","appItems","map","key","appstore_AppItem","AppStore","apps","appJSON","app","appName","src","appIcon","appstore_AppItems","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","OSStatistics","AndroidColors","iOSColors","this","data","iOSCounter","AndroidCounter","Object","keys","k","value","push","color","dist_default","style","backgroundColor","Component","DeviceList","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onCollectionUpdate","querySnapshot","devices","forEach","doc","_doc$data","model","modelName","osName","osVersion","id","undefined","defineProperty","setState","ref","firestore","collection","unsubscribe","state","onSnapshot","OSStatistics_OSStatistics","device","App","BrowserRouter","basename","process","Switch","Route","exact","path","concat","component","render","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b169affb.chunk.js","sourcesContent":["import React from 'react';\nimport './AppItem.css';\n\nfunction AppItem(props) {\n    const appItem = props.appItem;\n    return (\n        <div className=\"AppItem\">\n            <span>{appItem.os} {appItem.env &&\n                 <span> [{appItem.env}]</span>\n                 }: </span>\n            <a href={appItem.url} rel=\"noopener noreferrer\">\n                {appItem.name} ({appItem.version})\n          </a>\n        </div>\n    );\n}\n\nexport default AppItem;","import React from 'react';\nimport './AppItems.css';\n\nimport AppItem from './AppItem';\n\n\nfunction AppItems(props) {\n\n    const appItems = props.appItems;\n    const listItems = appItems.map((appItem) =>\n        <li key={appItem.url}><AppItem appItem={appItem} /></li>\n    );\n\n    return (\n        <ul className=\"AppItems\">{listItems}</ul>\n    );\n}\n\nexport default AppItems;","import React from 'react';\nimport './AppStore.css';\n\nimport AppItems from './AppItems';\n\nimport appJSON from '../../apps/apps.json';\n\nfunction AppStore(props) {\n\n    const apps = appJSON.map((app) =>\n        <li key={app.appName} className=\"AppStore\"><img src={app.appIcon} /><p>{app.appName}</p>\n            {app.apps && <AppItems appItems={app.apps} />}\n        </li>\n    );\n\n    return (\n        <ul className=\"AppList\">{apps}</ul>\n    );\n\n}\n\nexport default AppStore;","import * as firebase from 'firebase';\n// import firestore from 'firebase/firestore'\n\nconst settings = { timestampsInSnapshots: true };\n\nconst config = {\n    apiKey: \"AIzaSyD9AtuHI_zqeW3L2s-mTvc-J-281_dpAKw\",\n    authDomain: \"jbtestlab.firebaseapp.com\",\n    databaseURL: \"https://jbtestlab.firebaseio.com\",\n    projectId: \"jbtestlab\",\n    storageBucket: \"jbtestlab.appspot.com\",\n    messagingSenderId: \"242278540925\"\n};\nfirebase.initializeApp(config);\n\nfirebase.firestore().settings(settings);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './OSStatistics.css';\nimport PieChart from 'react-minimal-pie-chart';\n\nexport default class OSStatistics extends Component {\n\n\n    render() {\n        const AndroidColors = [\n            '#006400ff',\n            '#006400dd',\n            '#006400bb',\n            '#00640099',\n            '#00640077',\n            '#00640055',\n            '#00640033',\n        ];\n\n        const iOSColors = [\n            '#f39c12ff',\n            '#f39c12dd',\n            '#f39c12bb',\n            '#f39c1299',\n            '#f39c1277',\n            '#f39c1255',\n            '#f39c1233',\n        ];\n\n\n        const os = this.props.os\n        const data = []\n\n        var iOSCounter = 0\n        var AndroidCounter = 0\n        Object.keys(os).map(key => Object.keys(os[key]).map((k) => {\n            const value = os[key][k]\n            data.push({ value: value, color: key === 'Android' ? AndroidColors[AndroidCounter++] : iOSColors[iOSCounter++] })\n        }))\n\n        iOSCounter = 0\n        AndroidCounter = 0\n        return (\n            <div className='OSStatistics'>\n                <div className='PieChart'>\n                    <PieChart\n                        data={data}\n                    />\n                </div>\n                <div>\n                    <table className='Table'>\n                        <tbody>\n                            {\n                                Object.keys(os).map(key => Object.keys(os[key]).map(k => <tr style={{ backgroundColor: key === 'Android' ? AndroidColors[AndroidCounter++] : iOSColors[iOSCounter++], color: 'white' }} key={key + k}>\n                                    <td>{key} {k}</td>\n                                    <td>{os[key][k]}</td>\n                                </tr>))\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './DeviceList.css';\nimport firebase from '../../javascripts/firebase';\nimport OSStatistics from './OSStatistics';\n\nexport default class DeviceList extends Component {\n    constructor(props) {\n        super(props)\n        this.ref = firebase.firestore().collection('devices')\n        this.unsubscribe = null\n        this.state = {\n            devices: [],\n            os: {}\n            // os: { 'Android': { '9': 2, '7.0': 1 }, 'iOS': { '12.0': 1 } }\n        }\n    }\n\n    onCollectionUpdate = (querySnapshot) => {\n        const devices = []\n        const os = {}\n        querySnapshot.forEach((doc) => {\n            const { model, modelName, osName, osVersion } = doc.data()\n\n            // devices\n            devices.push({\n                key: doc.id,\n                doc, // DocumentSnapshot\n                model,\n                modelName,\n                osName,\n                osVersion,\n            })\n\n            // OS\n            if (os[osName] === undefined) {\n                os[osName] = { [osVersion]: 1 }\n            } else if (os[osName][osVersion] === undefined) {\n                os[osName][osVersion] = 1\n            } else {\n                os[osName][osVersion] += 1\n            }\n        })\n        this.setState({\n            devices,\n            os\n        })\n    }\n\n    componentDidMount() {\n        this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate)\n    }\n\n    render() {\n        return (\n            <div className='DeviceList'>\n                <h2>Test Lab device List</h2>\n\n                <OSStatistics os={this.state.os} />\n                <ul>\n                    {this.state.devices.map(device =>\n                        <li key={device.key} className='DeviceItem'>\n                            <div className='PlatformIcon'>\n                                {device.osName === 'Android' && <img src=\"https://img.icons8.com/color/48/000000/android-os.png\" />}\n                                {device.osName === 'iOS' && <img src=\"https://img.icons8.com/ios/48/000000/mac-os-filled.png\" />}\n                            </div>\n                            <div className='DeviceInfo'>\n                                <span>{device.modelName}</span>\n                                <p>{device.osName} {device.osVersion}</p>\n                            </div>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport './App.css';\nimport AppStore from './components/appstore/AppStore';\nimport DeviceList from './components/devices//DeviceList';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <h1>Julius Baer</h1>\n            <p>Internal App Store</p>\n          </div>\n          <div className=\"App-content\">\n            <Switch>\n\n              <Route exact path={`${process.env.PUBLIC_URL}/devices`} component={DeviceList} />\n              <Route exact path={`${process.env.PUBLIC_URL}/`} component={AppStore} />\n              <Route render={() => <div>\n                <h1>Oops...</h1>\n                <h2>Something went wrong :(</h2>\n              </div>} />\n\n              {/* <Route path={`${process.env.PUBLIC_URL}/devices`} component={DeviceList} />\n              <Route exact path='/' component={AppStore} />\n              <Route render={() => <h1>Oops...</h1>} /> */}\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}